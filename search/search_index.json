{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"lsp-metals # Emacs Scala IDE using lsp-mode to connect to Metals . Quickstart # An example to setup lsp-metals using use-package : ( use-package lsp-metals :ensure t :custom ;; You might set metals server options via -J arguments. This might not always work, for instance when ;; metals is installed using nix. In this case you can use JAVA_TOOL_OPTIONS environment variable. ( lsp-metals-server-args ' ( ;; Metals claims to support range formatting by default but it supports range ;; formatting of multiline strings only. You might want to disable it so that ;; emacs can use indentation provided by scala-mode. \"-J-Dmetals.allow-multiline-string-formatting=off\" ;; Enable unicode icons. But be warned that emacs might not render unicode ;; correctly in all cases. \"-J-Dmetals.icons=unicode\" )) ;; In case you want semantic highlighting. This also has to be enabled in lsp-mode using ;; `lsp-semantic-tokens-enable' variable. Also you might want to disable highlighting of modifiers ;; setting `lsp-semantic-tokens-apply-modifiers' to `nil' because metals sends `abstract' modifier ;; which is mapped to `keyword' face. ( lsp-metals-enable-semantic-highlighting t ) :hook ( scala-mode . lsp ))","title":"Home"},{"location":"#lsp-metals","text":"Emacs Scala IDE using lsp-mode to connect to Metals .","title":"lsp-metals"},{"location":"#quickstart","text":"An example to setup lsp-metals using use-package : ( use-package lsp-metals :ensure t :custom ;; You might set metals server options via -J arguments. This might not always work, for instance when ;; metals is installed using nix. In this case you can use JAVA_TOOL_OPTIONS environment variable. ( lsp-metals-server-args ' ( ;; Metals claims to support range formatting by default but it supports range ;; formatting of multiline strings only. You might want to disable it so that ;; emacs can use indentation provided by scala-mode. \"-J-Dmetals.allow-multiline-string-formatting=off\" ;; Enable unicode icons. But be warned that emacs might not render unicode ;; correctly in all cases. \"-J-Dmetals.icons=unicode\" )) ;; In case you want semantic highlighting. This also has to be enabled in lsp-mode using ;; `lsp-semantic-tokens-enable' variable. Also you might want to disable highlighting of modifiers ;; setting `lsp-semantic-tokens-apply-modifiers' to `nil' because metals sends `abstract' modifier ;; which is mapped to `keyword' face. ( lsp-metals-enable-semantic-highlighting t ) :hook ( scala-mode . lsp ))","title":"Quickstart"},{"location":"CHANGELOG/","text":"Changelog # Master # Add reset-choice command. Drop emacs 26 support. 1.1.0 # Migrate to lsp-protocol. Implement metals/windowStateDidChange notification. Drop emacs 25 support. 1.0.0 # Migrate from lsp-mode .","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#master","text":"Add reset-choice command. Drop emacs 26 support.","title":"Master"},{"location":"CHANGELOG/#110","text":"Migrate to lsp-protocol. Implement metals/windowStateDidChange notification. Drop emacs 25 support.","title":"1.1.0"},{"location":"CHANGELOG/#100","text":"Migrate from lsp-mode .","title":"1.0.0"}]}